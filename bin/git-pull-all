#!/bin/bash

# git-fetch by Ross Phillips
#  - Runs a git fetch in all git repo subfolders
#  - Won't work if you have spaces in your directory names but why would ya

# TODO - extract to colors.sh

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
		MAGENTA=$(tput setaf 9)
		ORANGE=$(tput setaf 172)
		GREEN=$(tput setaf 190)
		PURPLE=$(tput setaf 141)
		WHITE=$(tput setaf 0)
	else
		MAGENTA=$(tput setaf 5)
		ORANGE=$(tput setaf 4)
		GREEN=$(tput setaf 2)
		PURPLE=$(tput setaf 1)
		WHITE=$(tput setaf 7)
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	MAGENTA="\033[1;31m"
	ORANGE="\033[1;33m"
	GREEN="\033[1;32m"
	PURPLE="\033[1;35m"
	WHITE="\033[1;37m"
	BOLD=""
	RESET="\033[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BOLD
export RESET

# TODO - extract to git-functions.sh

function git_dirty() {
	[[ $(git status 2> /dev/null | tail -n1) != *"nothing to commit, working tree clean"* ]]
}

function git_dirty_parse() {
	[[ $(git status 2> /dev/null | tail -n1) != *"nothing to commit, working tree clean"* ]] && echo "*"
}

function git_ahead() {
	[[ $(git status -sb 2> /dev/null | head -n1 | cut -d ' ' -f 3,4) == *"ahead"* ]]
}

function git_ahead_parse() {
	echo $(git status -sb 2> /dev/null | head -n1 | cut -d ' ' -f 3,4,5,6)
}

function git_branch_parse() {
	git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(git_dirty_parse) $(git_ahead_parse)/"
}

function git_repo_echo {
	echo -e "$BOLD$GREEN$1$WHITE on $PURPLE$(git_branch_parse)$RESET"
}



changed=()
repo_count=0

for repo in `find . -type d -name ".git"`
do
	repo_count=$(($repo_count+1))

	dir=`echo $repo | sed -e 's/\/.git/\//' | sed s'/.$//' | sed s'/^\.\///'`
	cd $dir

	git pull

	if git_ahead || git_dirty
	then
		changed+=("$(git_repo_echo $dir)")
	else
		git_repo_echo $dir
	fi

	cd - &> /dev/null
done

if [ ${#changed[@]} -gt 0 ]
then
	echo
	for item in "${changed[@]}"
	do
		echo "$item"
	done
fi

echo -e "\n${#changed[*]} of $repo_count repositories have changes.\n"
